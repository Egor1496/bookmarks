import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchCount } from './counterAPI';

export interface CounterState {
  value: number;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: CounterState = {
  value: 0,
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

// Приведенная ниже функция называется thunk и позволяет нам выполнять асинх логику. Это
// может быть отправлено как обычное действие: `dispatch(incrementAsync(10))`. Этот
// вызовет thunk с функцией `dispatch` в качестве первого аргумента. Асинхронный
// затем код может быть выполнен и могут быть отправлены другие действия. Вещи таковы
// обычно используется для выполнения асинхронных запросов.

export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount: number) => {
    const response = await fetchCount(amount);

    // The value we return becomes the `fulfilled` action payload
    // Возвращаемое нами значение становится полезной нагрузкой `fulfilled` action

    return response.data;
  }
);

export const counterSlice = createSlice({
  name: 'counter',
  initialState,

  // The `reducers` field lets us define reducers and generate associated actions
  // Поле `reducers` позволяет нам определять reducers и генерировать связанные с ними actions

  reducers: {
    increment: (state) => {

      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes

      // Redux Toolkit позволяет нам писать "mutating" логику в редукторах. Это
      // на самом деле не изменяет состояние, потому что оно использует библиотеку Immer,
      // которая обнаруживает изменения в "draft state" и создает совершенно новое
      // immutable состояние на основе этих изменений

      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    clearCounter: (state) => {
      state.value = 0;
    },

    // Use the PayloadAction type to declare the contents of `action.payload`
    // Используйте PayloadAction, чтобы объявить содержимое `action.payload`

    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.

  // Поле `extraReducers` позволяет срезу обрабатывать действия, определенные в другом месте,
  // включая действия, сгенерированные createAsyncThunk или в других фрагментах.

  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      })
      .addCase(incrementAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { increment, decrement, clearCounter, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

// Приведенная ниже функция называется селектором и позволяет нам выбрать значение из
// state. Селекторы также могут быть определены встроенными, где они используются вместо
// в файле среза. Например: `useSelector((state: RootState) => state.counter.value)`

export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

// Мы также можем написать thunks вручную, которые могут содержать как синх, так и асинх. логику.
// Вот пример условной диспетчеризации действий на основе текущего состояния.

export const incrementIfOdd = (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState());
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount));
    }
  };

export default counterSlice.reducer;
