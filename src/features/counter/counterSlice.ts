import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchCount } from './counterAPI';

export interface CounterState {
  value: number;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: CounterState = {
  value: 0,
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// Приведенная ниже функция называется thunk и позволяет нам выполнять асинхронную логику. Это

// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// может быть отправлено как обычное действие: `dispatch(incrementAsync(10))`. Этот

// will call the thunk with the `dispatch` function as the first argument. Async
// вызовет thunk с функцией `dispatch` в качестве первого аргумента. Асинхронный

// code can then be executed and other actions can be dispatched. Thunks are
// затем код может быть выполнен и могут быть отправлены другие действия. Вещи таковы

// typically used to make async requests.
// обычно используется для выполнения асинхронных запросов.

export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount: number) => {
    const response = await fetchCount(amount);

    // The value we return becomes the `fulfilled` action payload
    // Возвращаемое нами значение становится полезной нагрузкой `выполненного` действия

    return response.data;
  }
);

export const counterSlice = createSlice({
  name: 'counter',
  initialState,

  // The `reducers` field lets us define reducers and generate associated actions
  // Поле "редуктор" позволяет нам определять редукторы и генерировать связанные с ними действия

  reducers: {
    increment: (state) => {

      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // Redux Toolkit позволяет нам писать "изменяющуюся" логику в редукторах. Это

      // doesn't actually mutate the state because it uses the Immer library,
      // на самом деле не изменяет состояние, потому что оно использует библиотеку Immer,

      // which detects changes to a "draft state" and produces a brand new
      // которая обнаруживает изменения в "черновом состоянии" и создает совершенно новое

      // immutable state based off those changes
      // неизменяемое состояние на основе этих изменений

      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },

    // Use the PayloadAction type to declare the contents of `action.payload`
    // Используйте Actiontype полезной нагрузки, чтобы объявить содержимое `action.полезная нагрузка`

    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // Поле "дополнительные редукторы" позволяет срезу обрабатывать действия, определенные в другом месте,

  // including actions generated by createAsyncThunk or in other slices.
  // включая действия, сгенерированные createAsyncThunk или в других фрагментах.

  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      })
      .addCase(incrementAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// Приведенная ниже функция называется селектором и позволяет нам выбрать значение из

// the state. Selectors can also be defined inline where they're used instead of
// государство. Селекторы также могут быть определены встроенными, где они используются вместо

// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// в файле среза. Например: `использовать селектор((состояние: корневое состояние) => состояние.счетчик.значение)`

export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Мы также можем написать thunks вручную, которые могут содержать как синхронизирующую, так и асинхронную логику.

// Here's an example of conditionally dispatching actions based on current state.
// Вот пример условной диспетчеризации действий на основе текущего состояния.

export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState());
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount));
    }
  };

export default counterSlice.reducer;
